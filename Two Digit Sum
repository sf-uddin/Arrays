
//Time complexity - O(n^2) , Space complexity - O(1)
 int[] TwoNumberSum(int[] array, int targetsum)
{
    for (int i = 0; i < array.Length; i++)
    {
        int firstNum = array[i];
        for (int j = i+1; j < array.Length; j++)
        {
            int secondNum = array[j];

            if (targetsum == firstNum + secondNum)
            {
                return new int[] { firstNum, secondNum};
            }
        }   
    }
    return new int[0];
}

---------------------------------------------------------

//Time complexity - O(n) , Space complexity - O(n)
int[] TwoNumberSum(int[] array, int targetSum)
{
    HashSet<int> set = new HashSet<int>();
    foreach (int num in array)
    {
        int pmatch = targetSum - num;
        if (set.Contains(pmatch))
        {
            return new int[] { pmatch, num };
        }
        else
        {
            set.Add(num);
        }
    }

    return new int[0];
}

------------------------------------------------------------

//Time complexity - O(n) , Space complexity - O(1)
int[] TwoNumberSum(int[] array, int targetSum)
{
    Array.Sort(array);
    int leftIdx = 0;
    int rightIdx = array.Length - 1;
    while (leftIdx < rightIdx)
    {
        int currentsum = array[leftIdx] + array[rightIdx];

        if (currentsum == targetSum)
            return new int[] { array[leftIdx], array[rightIdx] };
        else if (currentsum < targetSum)
            leftIdx++;
        else if (currentsum > targetSum)
            rightIdx--;
    }
    return new int[0];
}




